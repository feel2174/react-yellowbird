{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../reducers/index';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas/';\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(rootReducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: false // process.env.NODE_ENV === \"development\",\n\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/youngjoo/Downloads/projects/react-nodebird/front/store/configureStore.js"],"names":["createWrapper","createStore","compose","applyMiddleware","composeWithDevTools","rootReducer","createSagaMiddleware","rootSaga","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAGA,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAMC,cAAc,GAAGH,oBAAoB,EAA3C;AACE,QAAMI,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,QAAME,QAAQ,GAAG,QACfT,OAAO,CAACC,eAAe,CAAC,GAAGO,WAAJ,CAAhB,CADQ,GAEfN,mBAAmB,CAACD,eAAe,CAAC,GAAGO,WAAJ,CAAhB,CAFrB;AAGA,QAAME,KAAK,GAAGX,WAAW,CAACI,WAAD,EAAcM,QAAd,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBP,QAAnB,CAAjB;AACA,SAAOK,KAAP;AACH,CATD;;AAWA,MAAMG,OAAO,GAAGf,aAAa,CAACQ,cAAD,EAAiB;AAC5CQ,EAAAA,KAAK,EAAE,KADqC,CAE5C;;AAF4C,CAAjB,CAA7B;AAKA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../reducers/index'\nimport createSagaMiddleware from 'redux-saga'\nimport rootSaga from '../sagas/'\n\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n    const middlewares = [sagaMiddleware];\n    const enhancer = process.env.NODE_ENV === \"production\"\n    ? compose(applyMiddleware(...middlewares))\n    : composeWithDevTools(applyMiddleware(...middlewares))\n    const store = createStore(rootReducer, enhancer);\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n    return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: false,\n  // process.env.NODE_ENV === \"development\",\n});\n\nexport default wrapper;\n"]},"metadata":{},"sourceType":"module"}