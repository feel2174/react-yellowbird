{"ast":null,"code":"import shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\nexport var initialState = {\n  mainPosts: [// {\n    //   id: 1,\n    //   User: {\n    //     id: 1,\n    //     nickname: \"개밍두\",\n    //   },\n    //   content: \"첫번째 게시글 #해시태그 #익스프레스\",\n    //   Images: [\n    //     {\n    //       src:\n    //         \"https://i.pinimg.com/originals/8b/10/30/8b1030d543debb94705830c14f005893.jpg\",\n    //     },\n    //     {\n    //       src:\n    //         \"https://i.pinimg.com/originals/d3/f2/e6/d3f2e6f4da4bfc47a96a0e8aae1fffd4.jpg\",\n    //     },\n    //     {\n    //       src:\n    //         \"https://i.pinimg.com/originals/84/7f/1b/847f1b9a5d591cdc4a7855e4479de128.jpg\",\n    //     },\n    //   ],\n    //   Comments: [\n    //     {\n    //       User: {\n    //         nickname: \"nero\",\n    //       },\n    //       content: \"사랑해요\",\n    //     },\n    //     {\n    //       User: {\n    //         nickname: \"niro\",\n    //       },\n    //       content: \"대박이에요\",\n    //     },\n    //   ],\n    // },\n  ],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n};\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.imageUrl()\n      }],\n      Comments: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n};\nexport var LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\nexport var LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\nexport var LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport var REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport var REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport var REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport var LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport var LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport var LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\nexport var UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport var UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport var UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\nexport var UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport var UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport var UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\nexport var RETWEET_REQUEST = \"RETWEET_REQUEST\";\nexport var RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport var RETWEET_FAILURE = \"RETWEET_FAILURE\";\nexport var REMOVE_IMAGE = \"REMOVE_IMAGE\";\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: \"devzucca\"\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"devzucca\"\n    }\n  };\n}; // 이전 상태를 액션을 통해 다음상태로 만들어내는 함수 (불변성!!)\n\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          draft.imagePaths = action.data;\n          draft.uploadImagesLoading = false;\n          draft.uploadImagesDone = true;\n          break;\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n\n      case RETWEET_SUCCESS:\n        {\n          draft.retweetLoading = false;\n          draft.retweetDone = true;\n          draft.mainPosts.unshift(action.data);\n          break;\n        }\n\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        console.error(action.error);\n        break;\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          var _post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post.Likers = _post.Likers.filter(function (v) {\n            return v.id !== action.data.PostId;\n          });\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.hasMorePost = draft.mainPosts.length === 10;\n        draft.mainPosts = action.data.concat(action.data);\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        draft.imagePaths = [];\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data.PostId;\n        });\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var _post2 = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post2.Comments.unshift(action.data);\n\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter(function (v, i) {\n          return i !== action.data;\n        });\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/youngjoo/Downloads/projects/react-nodebird/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","hasMorePost","loadPostsLoading","loadPostsDone","loadPostsError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","addCommentLoading","addCommentDone","addCommentError","retweetLoading","retweetDone","retweetError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","imageUrl","Comments","sentence","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","error","unshift","console","post","find","v","PostId","Likers","push","UserId","filter","length","concat","i"],"mappings":"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","sourcesContent":["import shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\n\nexport const initialState = {\n  mainPosts: [\n    // {\n    //   id: 1,\n    //   User: {\n    //     id: 1,\n    //     nickname: \"개밍두\",\n    //   },\n    //   content: \"첫번째 게시글 #해시태그 #익스프레스\",\n    //   Images: [\n    //     {\n    //       src:\n    //         \"https://i.pinimg.com/originals/8b/10/30/8b1030d543debb94705830c14f005893.jpg\",\n    //     },\n    //     {\n    //       src:\n    //         \"https://i.pinimg.com/originals/d3/f2/e6/d3f2e6f4da4bfc47a96a0e8aae1fffd4.jpg\",\n    //     },\n    //     {\n    //       src:\n    //         \"https://i.pinimg.com/originals/84/7f/1b/847f1b9a5d591cdc4a7855e4479de128.jpg\",\n    //     },\n    //   ],\n    //   Comments: [\n    //     {\n    //       User: {\n    //         nickname: \"nero\",\n    //       },\n    //       content: \"사랑해요\",\n    //     },\n    //     {\n    //       User: {\n    //         nickname: \"niro\",\n    //       },\n    //       content: \"대박이에요\",\n    //     },\n    //   ],\n    // },\n  ],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null,\n};\n\nexport const generateDummyPost = (number) =>\n  Array(number)\n    .fill()\n    .map(() => ({\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName(),\n      },\n      content: faker.lorem.paragraph(),\n      Images: [\n        {\n          src: faker.image.imageUrl(),\n        },\n      ],\n      Comments: [\n        {\n          User: {\n            id: shortId.generate(),\n            nickname: faker.name.findName(),\n          },\n          content: faker.lorem.sentence(),\n        },\n      ],\n    }));\n\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\n\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\n\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\n\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport const RETWEET_FAILURE = \"RETWEET_FAILURE\";\n\nexport const REMOVE_IMAGE = \"REMOVE_IMAGE\";\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nconst dummyPost = (data) => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"devzucca\",\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst dummyComment = (data) => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"devzucca\",\n  },\n});\n\n// 이전 상태를 액션을 통해 다음상태로 만들어내는 함수 (불변성!!)\nconst reducer = (state = initialState, action) => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n      case UPLOAD_IMAGES_SUCCESS: {\n        draft.imagePaths = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n      }\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n      case RETWEET_SUCCESS: {\n        draft.retweetLoading = false;\n        draft.retweetDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n      }\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        console.error(action.error);\n        break;\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n      case LIKE_POST_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Likers.push({ id: action.data.UserId });\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n      }\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n      case UNLIKE_POST_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.PostId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n      case LOAD_POST_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POST_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.hasMorePost = draft.mainPosts.length === 10;\n        draft.mainPosts = action.data.concat(action.data);\n        break;\n      case LOAD_POST_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        draft.imagePaths = [];\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(\n          (v) => v.id !== action.data.PostId\n        );\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      }\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n        break;\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}