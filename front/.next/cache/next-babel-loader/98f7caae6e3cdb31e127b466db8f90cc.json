{"ast":null,"code":"import { all, fork, put, delay, takeLatest, throttle, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortId from \"shortid\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, generateDummyPost } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000); //const result = yield call(addPostAPI, action.data);\n\n    const id = shortId.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: {\n        id,\n        data: action.data\n      }\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(`/api/posts`, data);\n}\n\nfunction* loadPost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLoadPost() {\n  yield throttle(5000, LOAD_POST_REQUEST, loadPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchLoadPost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/youngjoo/Downloads/projects/react-nodebird/front/sagas/post.js"],"names":["all","fork","put","delay","takeLatest","throttle","call","axios","shortId","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","content","addPost","action","result","type","id","err","error","response","removePostAPI","delete","removePost","generate","addCommentAPI","postId","withCredentials","addComment","loadPostAPI","get","loadPost","watchAddPost","watchRemovePost","watchAddComment","watchLoadPost","postSaga"],"mappings":"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","sourcesContent":["import {\n  all,\n  fork,\n  put,\n  delay,\n  takeLatest,\n  throttle,\n  call,\n} from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortId from \"shortid\";\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  LOAD_POST_REQUEST,\n  LOAD_POST_SUCCESS,\n  LOAD_POST_FAILURE,\n  generateDummyPost,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", { content: data });\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(addPostAPI, action.data);\n    const id = shortId.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: {\n        id,\n        data: action.data,\n      },\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data, {\n    withCredentials: true,\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(`/api/posts`, data);\n}\nfunction* loadPost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: generateDummyPost(10),\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLoadPost() {\n  yield throttle(5000, LOAD_POST_REQUEST, loadPost);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchRemovePost),\n    fork(watchLoadPost),\n    fork(watchAddComment),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}