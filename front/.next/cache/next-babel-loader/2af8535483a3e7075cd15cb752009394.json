{"ast":null,"code":"import shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"개밍두\"\n    },\n    content: \"첫번째 게시글 #해시태그 #익스프레스\",\n    Images: [{\n      src: \"https://i.pinimg.com/originals/8b/10/30/8b1030d543debb94705830c14f005893.jpg\"\n    }, {\n      src: \"https://i.pinimg.com/originals/d3/f2/e6/d3f2e6f4da4bfc47a96a0e8aae1fffd4.jpg\"\n    }, {\n      src: \"https://i.pinimg.com/originals/84/7f/1b/847f1b9a5d591cdc4a7855e4479de128.jpg\"\n    }],\n    Comments: [{\n      User: {\n        nickname: \"nero\"\n      },\n      content: \"사랑해요\"\n    }, {\n      User: {\n        nickname: \"niro\"\n      },\n      content: \"대박이에요\"\n    }]\n  }],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.imageUrl()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport const RETWEET_FAILURE = \"RETWEET_FAILURE\";\nexport const REMOVE_IMAGE = \"REMOVE_IMAGE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"devzucca\"\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"devzucca\"\n  }\n}); // 이전 상태를 액션을 통해 다음상태로 만들어내는 함수 (불변성!!)\n\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          draft.imagePaths = action.data;\n          draft.uploadImagesLoading = false;\n          draft.uploadImagesDone = true;\n          break;\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n\n      case RETWEET_SUCCESS:\n        {\n          draft.retweetLoading = false;\n          draft.retweetDone = true;\n          draft.mainPosts.unshift(action.data);\n          break;\n        }\n\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        break;\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers = post.Likers.filter(v => v.id !== action.data.PostId);\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.hasMorePost = draft.mainPosts.length < 50;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        draft.imagePaths = [];\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Comments.unshift(action.data);\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/youngjoo/Downloads/projects/react-nodebird/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","hasMorePost","loadPostsLoading","loadPostsDone","loadPostsError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","addCommentLoading","addCommentDone","addCommentError","retweetLoading","retweetDone","retweetError","generateDummyPost","number","Array","fill","map","generate","name","findName","lorem","paragraph","image","imageUrl","sentence","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","error","unshift","post","find","v","PostId","Likers","push","UserId","filter","length","concat","i"],"mappings":"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","sourcesContent":["import shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\n\nexport const initialState = {\n  mainPosts: [\n    {\n      id: 1,\n      User: {\n        id: 1,\n        nickname: \"개밍두\",\n      },\n      content: \"첫번째 게시글 #해시태그 #익스프레스\",\n      Images: [\n        {\n          src:\n            \"https://i.pinimg.com/originals/8b/10/30/8b1030d543debb94705830c14f005893.jpg\",\n        },\n        {\n          src:\n            \"https://i.pinimg.com/originals/d3/f2/e6/d3f2e6f4da4bfc47a96a0e8aae1fffd4.jpg\",\n        },\n        {\n          src:\n            \"https://i.pinimg.com/originals/84/7f/1b/847f1b9a5d591cdc4a7855e4479de128.jpg\",\n        },\n      ],\n      Comments: [\n        {\n          User: {\n            nickname: \"nero\",\n          },\n          content: \"사랑해요\",\n        },\n        {\n          User: {\n            nickname: \"niro\",\n          },\n          content: \"대박이에요\",\n        },\n      ],\n    },\n  ],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null,\n};\n\nexport const generateDummyPost = (number) =>\n  Array(number)\n    .fill()\n    .map(() => ({\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName(),\n      },\n      content: faker.lorem.paragraph(),\n      Images: [\n        {\n          src: faker.image.imageUrl(),\n        },\n      ],\n      Comments: [\n        {\n          User: {\n            id: shortId.generate(),\n            nickname: faker.name.findName(),\n          },\n          content: faker.lorem.sentence(),\n        },\n      ],\n    }));\n\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\n\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\n\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\n\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport const RETWEET_FAILURE = \"RETWEET_FAILURE\";\n\nexport const REMOVE_IMAGE = \"REMOVE_IMAGE\";\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nconst dummyPost = (data) => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"devzucca\",\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst dummyComment = (data) => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"devzucca\",\n  },\n});\n\n// 이전 상태를 액션을 통해 다음상태로 만들어내는 함수 (불변성!!)\nconst reducer = (state = initialState, action) => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n      case UPLOAD_IMAGES_SUCCESS: {\n        draft.imagePaths = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n      }\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n      case RETWEET_SUCCESS: {\n        draft.retweetLoading = false;\n        draft.retweetDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n      }\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        break;\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n      case LIKE_POST_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Likers.push({ id: action.data.UserId });\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n      }\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n      case UNLIKE_POST_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.PostId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n      case LOAD_POST_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POST_SUCCESS:\n        draft.hasMorePost = draft.mainPosts.length < 50;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        break;\n      case LOAD_POST_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        draft.imagePaths = [];\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(\n          (v) => v.id !== action.data.PostId\n        );\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      }\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n        break;\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}