{"ast":null,"code":"import { all, fork, put, delay, throttle } from \"redux-saga/effects\";\nimport axios from 'axios';\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: \"ADD_POST_REQUEST\"\n    }); //const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      type: \"ADD_POST_SUCCESS\" //  data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield throttle(\"ADD_POST_REQUEST\", addPost, 5000);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost)]);\n}","map":{"version":3,"sources":["/Users/youngjoo/Downloads/projects/react-nodebird/front/sagas/post.js"],"names":["all","fork","put","delay","throttle","axios","addPostAPI","data","post","addPost","action","type","err","response","watchAddPost","postSaga"],"mappings":"AAAA,SAAUA,GAAV,EAAeC,IAAf,EAAsBC,GAAtB,EAA4BC,KAA5B,EAAoCC,QAApC,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAOF,KAAK,CAACG,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACD;;AACH,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;AACxB,MAAI;AACA,UAAMP,KAAK,CAAC,IAAD,CAAX;AACF,UAAMD,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAE;AADE,KAAD,CAAT,CAFE,CAKF;;AACA,UAAMT,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAE,kBADE,CAEV;;AAFU,KAAD,CAAT;AAID,GAVD,CAUE,OAAOC,GAAP,EAAY;AACZ,UAAMV,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAE,kBADE;AAERJ,MAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUO,YAAV,GAAyB;AACrB,QAAMV,QAAQ,CAAC,kBAAD,EAAqBK,OAArB,EAA8B,IAA9B,CAAd;AACD;;AAEH,eAAe,UAAUM,QAAV,GAAqB;AAChC,QAAMf,GAAG,CAAC,CACNC,IAAI,CAACa,YAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["import {  all, fork,  put,  delay,  throttle,    } from \"redux-saga/effects\";\nimport axios from 'axios';\n\nfunction addPostAPI(data) {\n    return axios.post(\"/api/post\", data);\n  }  \nfunction* addPost(action) {\n  try {\n      yield delay(1000);\n    yield put({\n      type: \"ADD_POST_REQUEST\",\n    });\n    //const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: \"ADD_POST_SUCCESS\",\n    //  data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n    yield throttle(\"ADD_POST_REQUEST\", addPost, 5000);\n  }\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost)\n    ])\n}"]},"metadata":{},"sourceType":"module"}