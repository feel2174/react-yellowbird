{"ast":null,"code":"import { all, fork, put, delay, takeLatest, throttle, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortId from \"shortid\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, generateDummyPost, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000); //const result = yield call(addPostAPI, action.data);\n\n    const id = shortId.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: {\n        id,\n        data: action.data\n      }\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(\"/posts\", data);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLoadPost() {\n  yield throttle(5000, LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, like);\n}\n\nfunction* watchUnLikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, loadPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchLoadPost), fork(watchLikePost), fork(watchUnLikePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/youngjoo/Downloads/projects/react-nodebird/front/sagas/post.js"],"names":["all","fork","put","delay","takeLatest","throttle","call","axios","shortId","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","generateDummyPost","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","content","withCredentials","addPost","action","result","type","id","err","error","response","removePostAPI","delete","removePost","generate","addCommentAPI","postId","addComment","console","loadPostAPI","get","loadPost","watchAddPost","watchRemovePost","watchAddComment","watchLoadPost","watchLikePost","like","watchUnLikePost","postSaga"],"mappings":"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","sourcesContent":["import {\n  all,\n  fork,\n  put,\n  delay,\n  takeLatest,\n  throttle,\n  call,\n} from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortId from \"shortid\";\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  LOAD_POST_REQUEST,\n  LOAD_POST_SUCCESS,\n  LOAD_POST_FAILURE,\n  generateDummyPost,\n  LIKE_POST_REQUEST,\n  UNLIKE_POST_REQUEST,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  return axios.post(\n    \"/post\",\n    { content: data },\n    {\n      withCredentials: true,\n    }\n  );\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(addPostAPI, action.data);\n    const id = shortId.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: {\n        id,\n        data: action.data,\n      },\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(\"/posts\", data);\n}\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLoadPost() {\n  yield throttle(5000, LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, like);\n}\n\nfunction* watchUnLikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, loadPost);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchRemovePost),\n    fork(watchLoadPost),\n    fork(watchLikePost),\n    fork(watchUnLikePost),\n    fork(watchAddComment),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}