{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/youngjoo/Downloads/projects/react-nodebird/front/pages/components/PostForm/PostCard.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { Card, Popover, Button, Avatar, List, Comment } from \"antd\";\nimport { RetweetOutlined, HeartOutlined, HeartTwoTone, MessageOutlined, EllipsisOutlined } from \"@ant-design/icons\";\nimport PostImages from \"./PostImages\";\nimport CommentForm from \"../CommentForm\";\nimport PostCardContent from \"./PostCardContent\";\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST } from \"../../../reducers/post\";\nimport FollowButton from \"../FollowButton\";\n\nvar PostCard = function PostCard(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      removePostLoading = _useSelector.removePostLoading;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var id = me && me.id;\n  var liked = post.Likers.find(function (v) {\n    return v.id === id;\n  });\n  console.log(liked);\n  var onLike = useCallback(function () {\n    dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  var onUnLike = useCallback(function () {\n    dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  });\n  var onRemovePost = useCallback(function () {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      cover: post.Images[0] && /*#__PURE__*/_jsxDEV(PostImages, {\n        images: post.Images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 34\n      }, _this),\n      actions: [/*#__PURE__*/_jsxDEV(RetweetOutlined, {}, \"retweet\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, _this), liked ? /*#__PURE__*/_jsxDEV(HeartTwoTone, {\n        twoToneColor: \"#eb2f96\",\n        onClick: onUnLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, _this) : /*#__PURE__*/_jsxDEV(HeartOutlined, {\n        onClick: onLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(MessageOutlined, {\n        onClick: onToggleComment\n      }, \"comment\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(Popover, {\n        content: /*#__PURE__*/_jsxDEV(Button.Group, {\n          children: id && post.User.id === id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              children: \"\\uC218\\uC815\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 21\n            }, _this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"danger\",\n              loading: removePostLoading,\n              onClick: onRemovePost,\n              children: \"\\uC0AD\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 21\n            }, _this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n            children: \"\\uC2E0\\uACE0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 19\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, _this),\n        children: /*#__PURE__*/_jsxDEV(EllipsisOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, _this)\n      }, \"ellipsis\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, _this)],\n      extra: id && /*#__PURE__*/_jsxDEV(FollowButton, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 22\n      }, _this),\n      children: /*#__PURE__*/_jsxDEV(Card.Meta, {\n        avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n          children: post.User.nickname[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 19\n        }, _this),\n        title: post.User.nickname,\n        description: /*#__PURE__*/_jsxDEV(PostCardContent, {\n          postData: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 24\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, _this), commentFormOpened && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(CommentForm, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(List, {\n        header: \"\".concat(post.Comments.length, \"\\uAC1C\\uC758 \\uB313\\uAE00\"),\n        itemLayout: \"horizontal\",\n        dataSource: post.Comments,\n        renderItem: function renderItem(item) {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Comment, {\n              author: item.User.nickname,\n              avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n                children: item.User.nickname[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 27\n              }, _this),\n              content: item.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, _this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(PostCard, \"bvSKCXETVqmbQok/rAf1lB+Dhq8=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = PostCard;\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n    Likers: PropTypes.arrayOf(PropTypes.object),\n    RetweetId: PropTypes.number,\n    Retweet: PropTypes.objectOf(PropTypes.any)\n  }).isRequired\n};\nexport default PostCard; // import React, { useState, useCallback, useEffect } from \"react\";\n// import { Card, Button, Avatar, List, Comment, Popover } from \"antd\";\n// import PropTypes from \"prop-types\";\n// import {\n//   RetweetOutlined,\n//   HeartTwoTone,\n//   HeartOutlined,\n//   MessageOutlined,\n//   EllipsisOutlined,\n// } from \"@ant-design/icons\";\n// import { useSelector, useDispatch } from \"react-redux\";\n// import styled from \"styled-components\";\n// import Link from \"next/link\";\n// import CommentForm from \"../CommentForm\";\n// import PostCardContent from \"./PostCardContent\";\n// import PostImages from \"./PostImages\";\n// import FollowButton from \"../FollowButton\";\n// import { REMOVE_POST_REQUEST, RETWEET_REQUEST } from \"../../../reducers/post\";\n// const CardWrapper = styled.div`\n//   margin-bottom: 20px;\n// `;\n// const PostCard = ({ post }) => {\n//   const dispatch = useDispatch();\n//   const { removePostLoading } = useSelector(\n//     (state) => state.post\n//   );\n//   const [commentFormOpened, setCommentFormOpened] = useState(false);\n//   const [liked, setLiked] = useState(false);\n//   const { me } = useSelector((state) => state.user);\n//   const id = me && me.id;\n//   const onToggleComment = useCallback(() => {\n//     setCommentFormOpened((prev) => !prev);\n//   }, []);\n//   const onToggleLike = useCallback(() => {\n//     setLiked((prev) => !prev);\n//   }, [id]);\n//   const onRemovePost = useCallback(() => {\n//     return dispatch({\n//       type: REMOVE_POST_REQUEST,\n//       data: post.id,\n//     });\n//   }, []);\n//   const onRetweet = useCallback(() => {\n//     if (!id) {\n//       return alert(\"로그인이 필요합니다.\");\n//     }\n//     return dispatch({\n//       type: RETWEET_REQUEST,\n//       data: post.id,\n//     });\n//   }, [id]);\n//   return (\n//     <CardWrapper key={post.id}>\n//       <Card\n//         cover={post.Images[0] && <PostImages images={post.Images} />}\n//         actions={[\n//           <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\n//           liked ? (\n//             <HeartTwoTone\n//               twoToneColor=\"#eb2f96\"\n//               key=\"heart\"\n//               onClick={onToggleLike}\n//             />\n//           ) : (\n//             <HeartOutlined key=\"heart\" onClick={onToggleLike} />\n//           ),\n//           <MessageOutlined key=\"message\" onClick={onToggleComment} />,\n//           <Popover\n//             key=\"ellipsis\"\n//             content={\n//               <Button.Group>\n//                 {id && post.UserId === id ? (\n//                   <>\n//                     <Button>수정</Button>\n//                     <Button\n//                       type=\"danger\"\n//                       loading={removePostLoading}\n//                       onClick={onRemovePost}\n//                     >\n//                       삭제\n//                     </Button>\n//                   </>\n//                 ) : (\n//                   <Button>신고</Button>\n//                 )}\n//               </Button.Group>\n//             }\n//           >\n//             <EllipsisOutlined />\n//           </Popover>,\n//         ]}\n//         title={post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null}\n//         extra={<FollowButton post={post} />}\n//       >\n//         {post.RetweetId && post.Retweet ? (\n//           <Card\n//             cover={\n//               post.Retweet.Images[0] && (\n//                 <PostImages images={post.Retweet.Images} />\n//               )\n//             }\n//           >\n//             <Card.Meta\n//               avatar={<Avatar>{post.Retweet.User.nickname[0]}</Avatar>}\n//               title={post.Retweet.User.nickname}\n//               description={<PostCardContent postData={post.Retweet.content} />}\n//             />\n//           </Card>\n//         ) : (\n//           <Card.Meta\n//             avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n//             title={post.User.nickname}\n//             description={<PostCardContent postData={post.content} />}\n//           />\n//         )}\n//       </Card>\n//       {commentFormOpened && (\n//         <>\n//           <CommentForm post={post} />\n//           <List\n//             header={`${post.Comments ? post.Comments.length : 0} 댓글`}\n//             itemLayout=\"horizontal\"\n//             dataSource={post.Comments || []}\n//             renderItem={(item) => (\n//               <li>\n//                 <Comment\n//                   author={item.User.nickname}\n//                   avatar={\n//                     <Link\n//                       href={{ pathname: \"/user\", query: { id: item.User.id } }}\n//                       as={`/user/${item.User.id}`}\n//                     >\n//                       <a>\n//                         <Avatar>{item.User.nickname[0]}</Avatar>\n//                       </a>\n//                     </Link>\n//                   }\n//                   content={item.content}\n//                 />\n//               </li>\n//             )}\n//           />\n//         </>\n//       )}\n//     </CardWrapper>\n//   );\n// };\n// PostCard.propTypes = {\n//   post: PropTypes.shape({\n//     id: PropTypes.number,\n//     User: PropTypes.object,\n//     UserId: PropTypes.number,\n//     content: PropTypes.string,\n//     createdAt: PropTypes.object,\n//     Comments: PropTypes.arrayOf(PropTypes.any),\n//     Images: PropTypes.arrayOf(PropTypes.any),\n//     RetweetId: PropTypes.number,\n//     Retweet: PropTypes.objectOf(PropTypes.any),\n//   }).isRequired,\n// };\n// export default PostCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCard\");","map":{"version":3,"sources":["/Users/youngjoo/Downloads/projects/react-nodebird/front/pages/components/PostForm/PostCard.jsx"],"names":["React","useState","useCallback","useEffect","useSelector","useDispatch","PropTypes","Card","Popover","Button","Avatar","List","Comment","RetweetOutlined","HeartOutlined","HeartTwoTone","MessageOutlined","EllipsisOutlined","PostImages","CommentForm","PostCardContent","REMOVE_POST_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","FollowButton","PostCard","post","dispatch","state","removePostLoading","commentFormOpened","setCommentFormOpened","id","me","liked","Likers","find","v","console","log","onLike","type","data","onUnLike","onToggleComment","prev","onRemovePost","marginBottom","Images","User","nickname","content","Comments","length","item","propTypes","shape","number","object","string","createdAt","arrayOf","RetweetId","Retweet","objectOf","any","isRequired"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,EAAeC,OAAf,EAAwBC,MAAxB,EAAgCC,MAAhC,EAAwCC,IAAxC,EAA8CC,OAA9C,QAA6D,MAA7D;AACA,SACEC,eADF,EAEEC,aAFF,EAGEC,YAHF,EAIEC,eAJF,EAKEC,gBALF,QAMO,mBANP;AAOA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SACEC,mBADF,EAEEC,iBAFF,EAGEC,mBAHF,QAIO,wBAJP;AAKA,OAAOC,YAAP,MAAyB,iBAAzB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAc;AAAA;;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAC7B,MAAMC,QAAQ,GAAGtB,WAAW,EAA5B;;AAD6B,qBAECD,WAAW,CAAC,UAACwB,KAAD;AAAA,WAAWA,KAAK,CAACF,IAAjB;AAAA,GAAD,CAFZ;AAAA,MAErBG,iBAFqB,gBAErBA,iBAFqB;;AAAA,kBAGqB5B,QAAQ,CAAC,KAAD,CAH7B;AAAA,MAGtB6B,iBAHsB;AAAA,MAGHC,oBAHG;;AAI7B,MAAMC,EAAE,GAAGC,EAAE,IAAIA,EAAE,CAACD,EAApB;AACA,MAAME,KAAK,GAAGR,IAAI,CAACS,MAAL,CAAYC,IAAZ,CAAiB,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACL,EAAF,KAASA,EAAhB;AAAA,GAAjB,CAAd;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACA,MAAMM,MAAM,GAAGtC,WAAW,CAAC,YAAM;AAC/ByB,IAAAA,QAAQ,CAAC;AACPc,MAAAA,IAAI,EAAEnB,iBADC;AAEPoB,MAAAA,IAAI,EAAEhB,IAAI,CAACM;AAFJ,KAAD,CAAR;AAID,GALyB,EAKvB,EALuB,CAA1B;AAMA,MAAMW,QAAQ,GAAGzC,WAAW,CAAC,YAAM;AACjCyB,IAAAA,QAAQ,CAAC;AACPc,MAAAA,IAAI,EAAElB,mBADC;AAEPmB,MAAAA,IAAI,EAAEhB,IAAI,CAACM;AAFJ,KAAD,CAAR;AAID,GAL2B,EAKzB,EALyB,CAA5B;AAMA,MAAMY,eAAe,GAAG1C,WAAW,CAAC,YAAM;AACxC6B,IAAAA,oBAAoB,CAAC,UAACc,IAAD;AAAA,aAAU,CAACA,IAAX;AAAA,KAAD,CAApB;AACD,GAFkC,CAAnC;AAGA,MAAMC,YAAY,GAAG5C,WAAW,CAAC,YAAM;AACrCyB,IAAAA,QAAQ,CAAC;AACPc,MAAAA,IAAI,EAAEpB,mBADC;AAEPqB,MAAAA,IAAI,EAAEhB,IAAI,CAACM;AAFJ,KAAD,CAAR;AAID,GAL+B,EAK7B,EAL6B,CAAhC;AAOA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEe,MAAAA,YAAY,EAAE;AAAhB,KAAZ;AAAA,4BACE,QAAC,IAAD;AACE,MAAA,KAAK,EAAErB,IAAI,CAACsB,MAAL,CAAY,CAAZ,kBAAkB,QAAC,UAAD;AAAY,QAAA,MAAM,EAAEtB,IAAI,CAACsB;AAAzB;AAAA;AAAA;AAAA;AAAA,eAD3B;AAEE,MAAA,OAAO,EAAE,cACP,QAAC,eAAD,MAAqB,SAArB;AAAA;AAAA;AAAA;AAAA,eADO,EAEPd,KAAK,gBACH,QAAC,YAAD;AAEE,QAAA,YAAY,EAAC,SAFf;AAGE,QAAA,OAAO,EAAES;AAHX,SACM,OADN;AAAA;AAAA;AAAA;AAAA,eADG,gBAOH,QAAC,aAAD;AAA2B,QAAA,OAAO,EAAEH;AAApC,SAAmB,OAAnB;AAAA;AAAA;AAAA;AAAA,eATK,eAWP,QAAC,eAAD;AAA+B,QAAA,OAAO,EAAEI;AAAxC,SAAqB,SAArB;AAAA;AAAA;AAAA;AAAA,eAXO,eAYP,QAAC,OAAD;AAEE,QAAA,OAAO,eACL,QAAC,MAAD,CAAQ,KAAR;AAAA,oBACGZ,EAAE,IAAIN,IAAI,CAACuB,IAAL,CAAUjB,EAAV,KAAiBA,EAAvB,gBACC;AAAA,oCACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAEE,QAAC,MAAD;AACE,cAAA,IAAI,EAAC,QADP;AAEE,cAAA,OAAO,EAAEH,iBAFX;AAGE,cAAA,OAAO,EAAEiB,YAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF;AAAA,0BADD,gBAYC,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAbJ;AAAA;AAAA;AAAA;AAAA,iBAHJ;AAAA,+BAqBE,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AArBF,SACM,UADN;AAAA;AAAA;AAAA;AAAA,eAZO,CAFX;AAsCE,MAAA,KAAK,EAAEd,EAAE,iBAAI,QAAC,YAAD;AAAc,QAAA,IAAI,EAAEN;AAApB;AAAA;AAAA;AAAA;AAAA,eAtCf;AAAA,6BAwCE,QAAC,IAAD,CAAM,IAAN;AACE,QAAA,MAAM,eAAE,QAAC,MAAD;AAAA,oBAASA,IAAI,CAACuB,IAAL,CAAUC,QAAV,CAAmB,CAAnB;AAAT;AAAA;AAAA;AAAA;AAAA,iBADV;AAEE,QAAA,KAAK,EAAExB,IAAI,CAACuB,IAAL,CAAUC,QAFnB;AAGE,QAAA,WAAW,eAAE,QAAC,eAAD;AAAiB,UAAA,QAAQ,EAAExB,IAAI,CAACyB;AAAhC;AAAA;AAAA;AAAA;AAAA;AAHf;AAAA;AAAA;AAAA;AAAA;AAxCF;AAAA;AAAA;AAAA;AAAA,aADF,EA+CGrB,iBAAiB,iBAChB;AAAA,8BACE,QAAC,WAAD;AAAa,QAAA,IAAI,EAAEJ;AAAnB;AAAA;AAAA;AAAA;AAAA,eADF,eAEE,QAAC,IAAD;AACE,QAAA,MAAM,YAAKA,IAAI,CAAC0B,QAAL,CAAcC,MAAnB,8BADR;AAEE,QAAA,UAAU,EAAC,YAFb;AAGE,QAAA,UAAU,EAAE3B,IAAI,CAAC0B,QAHnB;AAIE,QAAA,UAAU,EAAE,oBAACE,IAAD;AAAA,8BACV;AAAA,mCACE,QAAC,OAAD;AACE,cAAA,MAAM,EAAEA,IAAI,CAACL,IAAL,CAAUC,QADpB;AAEE,cAAA,MAAM,eAAE,QAAC,MAAD;AAAA,0BAASI,IAAI,CAACL,IAAL,CAAUC,QAAV,CAAmB,CAAnB;AAAT;AAAA;AAAA;AAAA;AAAA,uBAFV;AAGE,cAAA,OAAO,EAAEI,IAAI,CAACH;AAHhB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,mBADU;AAAA;AAJd;AAAA;AAAA;AAAA;AAAA,eAFF;AAAA;AAAA;AAAA;AAAA;AAAA,aAhDJ;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAqED,CAlGD;;GAAM1B,Q;UACapB,W,EACaD,W;;;KAF1BqB,Q;AAoGNA,QAAQ,CAAC8B,SAAT,GAAqB;AACnB7B,EAAAA,IAAI,EAAEpB,SAAS,CAACkD,KAAV,CAAgB;AACpBxB,IAAAA,EAAE,EAAE1B,SAAS,CAACmD,MADM;AAEpBR,IAAAA,IAAI,EAAE3C,SAAS,CAACoD,MAFI;AAGpBP,IAAAA,OAAO,EAAE7C,SAAS,CAACqD,MAHC;AAIpBC,IAAAA,SAAS,EAAEtD,SAAS,CAACqD,MAJD;AAKpBP,IAAAA,QAAQ,EAAE9C,SAAS,CAACuD,OAAV,CAAkBvD,SAAS,CAACoD,MAA5B,CALU;AAMpBV,IAAAA,MAAM,EAAE1C,SAAS,CAACuD,OAAV,CAAkBvD,SAAS,CAACoD,MAA5B,CANY;AAOpBvB,IAAAA,MAAM,EAAE7B,SAAS,CAACuD,OAAV,CAAkBvD,SAAS,CAACoD,MAA5B,CAPY;AAQpBI,IAAAA,SAAS,EAAExD,SAAS,CAACmD,MARD;AASpBM,IAAAA,OAAO,EAAEzD,SAAS,CAAC0D,QAAV,CAAmB1D,SAAS,CAAC2D,GAA7B;AATW,GAAhB,EAUHC;AAXgB,CAArB;AAcA,eAAezC,QAAfsourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { Card, Popover, Button, Avatar, List, Comment } from \"antd\";\nimport {\n  RetweetOutlined,\n  HeartOutlined,\n  HeartTwoTone,\n  MessageOutlined,\n  EllipsisOutlined,\n} from \"@ant-design/icons\";\nimport PostImages from \"./PostImages\";\nimport CommentForm from \"../CommentForm\";\nimport PostCardContent from \"./PostCardContent\";\nimport {\n  REMOVE_POST_REQUEST,\n  LIKE_POST_REQUEST,\n  UNLIKE_POST_REQUEST,\n} from \"../../../reducers/post\";\nimport FollowButton from \"../FollowButton\";\n\nconst PostCard = ({ post }) => {\n  const dispatch = useDispatch();\n  const { removePostLoading } = useSelector((state) => state.post);\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\n  const id = me && me.id;\n  const liked = post.Likers.find((v) => v.id === id);\n  console.log(liked);\n  const onLike = useCallback(() => {\n    dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id,\n    });\n  }, []);\n  const onUnLike = useCallback(() => {\n    dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id,\n    });\n  }, []);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened((prev) => !prev);\n  });\n  const onRemovePost = useCallback(() => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id,\n    });\n  }, []);\n\n  return (\n    <div style={{ marginBottom: 20 }}>\n      <Card\n        cover={post.Images[0] && <PostImages images={post.Images} />}\n        actions={[\n          <RetweetOutlined key=\"retweet\" />,\n          liked ? (\n            <HeartTwoTone\n              key=\"heart\"\n              twoToneColor=\"#eb2f96\"\n              onClick={onUnLike}\n            />\n          ) : (\n            <HeartOutlined key=\"heart\" onClick={onLike} />\n          ),\n          <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\n          <Popover\n            key=\"ellipsis\"\n            content={\n              <Button.Group>\n                {id && post.User.id === id ? (\n                  <>\n                    <Button>수정</Button>\n                    <Button\n                      type=\"danger\"\n                      loading={removePostLoading}\n                      onClick={onRemovePost}\n                    >\n                      삭제\n                    </Button>\n                  </>\n                ) : (\n                  <Button>신고</Button>\n                )}\n              </Button.Group>\n            }\n          >\n            <EllipsisOutlined />\n          </Popover>,\n        ]}\n        extra={id && <FollowButton post={post} />}\n      >\n        <Card.Meta\n          avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n          title={post.User.nickname}\n          description={<PostCardContent postData={post.content} />}\n        />\n      </Card>\n      {commentFormOpened && (\n        <div>\n          <CommentForm post={post} />\n          <List\n            header={`${post.Comments.length}개의 댓글`}\n            itemLayout=\"horizontal\"\n            dataSource={post.Comments}\n            renderItem={(item) => (\n              <li>\n                <Comment\n                  author={item.User.nickname}\n                  avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\n                  content={item.content}\n                />\n              </li>\n            )}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n    Likers: PropTypes.arrayOf(PropTypes.object),\n    RetweetId: PropTypes.number,\n    Retweet: PropTypes.objectOf(PropTypes.any),\n  }).isRequired,\n};\n\nexport default PostCard;\n\n// import React, { useState, useCallback, useEffect } from \"react\";\n// import { Card, Button, Avatar, List, Comment, Popover } from \"antd\";\n// import PropTypes from \"prop-types\";\n// import {\n//   RetweetOutlined,\n//   HeartTwoTone,\n//   HeartOutlined,\n//   MessageOutlined,\n//   EllipsisOutlined,\n// } from \"@ant-design/icons\";\n// import { useSelector, useDispatch } from \"react-redux\";\n// import styled from \"styled-components\";\n// import Link from \"next/link\";\n\n// import CommentForm from \"../CommentForm\";\n// import PostCardContent from \"./PostCardContent\";\n// import PostImages from \"./PostImages\";\n// import FollowButton from \"../FollowButton\";\n// import { REMOVE_POST_REQUEST, RETWEET_REQUEST } from \"../../../reducers/post\";\n\n// const CardWrapper = styled.div`\n//   margin-bottom: 20px;\n// `;\n\n// const PostCard = ({ post }) => {\n//   const dispatch = useDispatch();\n//   const { removePostLoading } = useSelector(\n//     (state) => state.post\n//   );\n//   const [commentFormOpened, setCommentFormOpened] = useState(false);\n//   const [liked, setLiked] = useState(false);\n//   const { me } = useSelector((state) => state.user);\n//   const id = me && me.id;\n\n  \n//   const onToggleComment = useCallback(() => {\n//     setCommentFormOpened((prev) => !prev);\n//   }, []);\n\n//   const onToggleLike = useCallback(() => {\n//     setLiked((prev) => !prev);\n//   }, [id]);\n\n//   const onRemovePost = useCallback(() => {\n//     return dispatch({\n//       type: REMOVE_POST_REQUEST,\n//       data: post.id,\n//     });\n//   }, []);\n\n//   const onRetweet = useCallback(() => {\n//     if (!id) {\n//       return alert(\"로그인이 필요합니다.\");\n//     }\n//     return dispatch({\n//       type: RETWEET_REQUEST,\n//       data: post.id,\n//     });\n//   }, [id]);\n\n//   return (\n//     <CardWrapper key={post.id}>\n//       <Card\n//         cover={post.Images[0] && <PostImages images={post.Images} />}\n//         actions={[\n//           <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\n//           liked ? (\n//             <HeartTwoTone\n//               twoToneColor=\"#eb2f96\"\n//               key=\"heart\"\n//               onClick={onToggleLike}\n//             />\n//           ) : (\n//             <HeartOutlined key=\"heart\" onClick={onToggleLike} />\n//           ),\n//           <MessageOutlined key=\"message\" onClick={onToggleComment} />,\n//           <Popover\n//             key=\"ellipsis\"\n//             content={\n//               <Button.Group>\n//                 {id && post.UserId === id ? (\n//                   <>\n//                     <Button>수정</Button>\n//                     <Button\n//                       type=\"danger\"\n//                       loading={removePostLoading}\n//                       onClick={onRemovePost}\n//                     >\n//                       삭제\n//                     </Button>\n//                   </>\n//                 ) : (\n//                   <Button>신고</Button>\n//                 )}\n//               </Button.Group>\n//             }\n//           >\n//             <EllipsisOutlined />\n//           </Popover>,\n//         ]}\n//         title={post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null}\n//         extra={<FollowButton post={post} />}\n//       >\n//         {post.RetweetId && post.Retweet ? (\n//           <Card\n//             cover={\n//               post.Retweet.Images[0] && (\n//                 <PostImages images={post.Retweet.Images} />\n//               )\n//             }\n//           >\n//             <Card.Meta\n//               avatar={<Avatar>{post.Retweet.User.nickname[0]}</Avatar>}\n//               title={post.Retweet.User.nickname}\n//               description={<PostCardContent postData={post.Retweet.content} />}\n//             />\n//           </Card>\n//         ) : (\n//           <Card.Meta\n//             avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n//             title={post.User.nickname}\n//             description={<PostCardContent postData={post.content} />}\n//           />\n//         )}\n//       </Card>\n//       {commentFormOpened && (\n//         <>\n//           <CommentForm post={post} />\n//           <List\n//             header={`${post.Comments ? post.Comments.length : 0} 댓글`}\n//             itemLayout=\"horizontal\"\n//             dataSource={post.Comments || []}\n//             renderItem={(item) => (\n//               <li>\n//                 <Comment\n//                   author={item.User.nickname}\n//                   avatar={\n//                     <Link\n//                       href={{ pathname: \"/user\", query: { id: item.User.id } }}\n//                       as={`/user/${item.User.id}`}\n//                     >\n//                       <a>\n//                         <Avatar>{item.User.nickname[0]}</Avatar>\n//                       </a>\n//                     </Link>\n//                   }\n//                   content={item.content}\n//                 />\n//               </li>\n//             )}\n//           />\n//         </>\n//       )}\n//     </CardWrapper>\n//   );\n// };\n\n// PostCard.propTypes = {\n//   post: PropTypes.shape({\n//     id: PropTypes.number,\n//     User: PropTypes.object,\n//     UserId: PropTypes.number,\n//     content: PropTypes.string,\n//     createdAt: PropTypes.object,\n//     Comments: PropTypes.arrayOf(PropTypes.any),\n//     Images: PropTypes.arrayOf(PropTypes.any),\n//     RetweetId: PropTypes.number,\n//     Retweet: PropTypes.objectOf(PropTypes.any),\n//   }).isRequired,\n// };\n\n// export default PostCard;\n"]},"metadata":{},"sourceType":"module"}