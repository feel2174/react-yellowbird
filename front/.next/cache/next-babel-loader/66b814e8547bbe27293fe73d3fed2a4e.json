{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, put, delay, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: \"ADD_POST_REQUEST\"\n          });\n\n        case 5:\n          _context.next = 7;\n          return put({\n            type: \"ADD_POST_SUCCESS\" //  data: result.data,\n\n          });\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 13;\n          return put({\n            type: \"ADD_POST_FAILURE\",\n            error: _context.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(\"ADD_POST_REQUEST\", addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/youngjoo/Downloads/projects/react-nodebird/front/sagas/post.js"],"names":["addPost","watchAddPost","postSaga","all","fork","put","delay","takeLatest","axios","addPostAPI","data","post","action","type","error","response"],"mappings":";;oDAMUA,O;qDAmBAC,Y;qDAIeC,Q;;AA7BzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,KAAzB,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOF,KAAK,CAACG,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACD;;AACD,SAAUV,OAAV,CAAkBY,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMN,KAAK,CAAC,IAAD,CAAX;;AAFJ;AAAA;AAGI,iBAAMD,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAAE;AADE,WAAD,CAAT;;AAHJ;AAAA;AAOI,iBAAMR,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAAE,kBADE,CAER;;AAFQ,WAAD,CAAT;;AAPJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAYI,iBAAMR,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAAE,kBADE;AAERC,YAAAA,KAAK,EAAE,YAAIC,QAAJ,CAAaL;AAFZ,WAAD,CAAT;;AAZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,SAAUT,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,UAAU,CAAC,kBAAD,EAAqBP,OAArB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACH,YAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, put, delay, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: \"ADD_POST_REQUEST\",\n    });\n    //const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: \"ADD_POST_SUCCESS\",\n      //  data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(\"ADD_POST_REQUEST\", addPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost)]);\n}\n"]},"metadata":{},"sourceType":"module"}