{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, put, delay, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from \"../reducers/post\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: ADD_POST_REQUEST\n          });\n\n        case 5:\n          _context.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS //  data: result.data,\n\n          });\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 13;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/\".concat(data.id, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: ADD_COMMENT_REQUEST\n          });\n\n        case 5:\n          _context2.next = 7;\n          return put({\n            type: ADD_COMMENT_SUCCESS //  data: result.data,\n\n          });\n\n        case 7:\n          _context2.next = 13;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 9]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/youngjoo/Downloads/projects/react-nodebird/front/sagas/post.js"],"names":["addPost","addComment","watchAddPost","watchAddComment","postSaga","all","fork","put","delay","takeLatest","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPostAPI","data","post","action","type","error","response","addCommentAPI","id"],"mappings":";;oDAQUA,O;qDAsBAC,U;qDAoBAC,Y;qDAGAC,e;qDAKeC,Q;;AA1DzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,KAAzB,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,gBAA7C,EACAC,mBADA,EACqBC,mBADrB,EAC0CC,mBAD1C,QACqE,kBADrE;;AAGA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOR,KAAK,CAACS,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACD;;AACD,SAAUlB,OAAV,CAAkBoB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMZ,KAAK,CAAC,IAAD,CAAX;;AAFJ;AAAA;AAGI,iBAAMD,GAAG,CAAC;AACRc,YAAAA,IAAI,EAAEV;AADE,WAAD,CAAT;;AAHJ;AAAA;AAOI,iBAAMJ,GAAG,CAAC;AACRc,YAAAA,IAAI,EAAET,gBADE,CAER;;AAFQ,WAAD,CAAT;;AAPJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAYI,iBAAML,GAAG,CAAC;AACRc,YAAAA,IAAI,EAAER,gBADE;AAERS,YAAAA,KAAK,EAAE,YAAIC,QAAJ,CAAaL;AAFZ,WAAD,CAAT;;AAZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,SAASM,aAAT,CAAuBN,IAAvB,EAA6B;AAC3B,SAAOR,KAAK,CAACS,IAAN,qBAAwBD,IAAI,CAACO,EAA7B,eAA2CP,IAA3C,CAAP;AACD;;AACD,SAAUjB,UAAV,CAAqBmB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMZ,KAAK,CAAC,IAAD,CAAX;;AAFJ;AAAA;AAGI,iBAAMD,GAAG,CAAC;AACRc,YAAAA,IAAI,EAAEP;AADE,WAAD,CAAT;;AAHJ;AAAA;AAOI,iBAAMP,GAAG,CAAC;AACRc,YAAAA,IAAI,EAAEN,mBADE,CAER;;AAFQ,WAAD,CAAT;;AAPJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAYI,iBAAMR,GAAG,CAAC;AACRc,YAAAA,IAAI,EAAEL,mBADE;AAERM,YAAAA,KAAK,EAAE,aAAIC,QAAJ,CAAaL;AAFZ,WAAD,CAAT;;AAZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,SAAUhB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,UAAU,CAACE,gBAAD,EAAmBX,OAAnB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUG,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,UAAU,CAACK,mBAAD,EAAsBb,UAAtB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACJ,YAAD,CAAL,EAAqBI,IAAI,CAACH,eAAD,CAAzB,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, put, delay, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\nADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from \"../reducers/post\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: ADD_POST_REQUEST,\n    });\n    //const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      //  data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.id}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_REQUEST,\n    });\n    //const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      //  data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}\n"]},"metadata":{},"sourceType":"module"}