{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/youngjoo/Downloads/projects/react-nodebird/front/pages/components/PostForm/PostCard.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\n// import React, { useState, useCallback } from \"react\";\n// import { useSelector, useDispatch } from \"react-redux\";\n// import PropTypes from \"prop-types\";\n// import { Card, Popover, Button, Avatar, List, Comment } from \"antd\";\n// import {\n//   RetweetOutlined,\n//   HeartOutlined,\n//   HeartTwoTone,\n//   MessageOutlined,\n//   EllipsisOutlined,\n// } from \"@ant-design/icons\";\n// import PostImages from \"./PostImages\";\n// import CommentForm from \"../CommentForm\";\n// import PostCardContent from \"./PostCardContent\";\n// import {\n//   REMOVE_POST_REQUEST,\n//   LIKE_POST_REQUEST,\n//   UNLIKE_POST_REQUEST,\n// } from \"../../../reducers/post\";\n// import FollowButton from \"../FollowButton\";\n// const PostCard = ({ post }) => {\n//   const dispatch = useDispatch();\n//   const { removePostLoading } = useSelector((state) => state.post);\n//   const [commentFormOpened, setCommentFormOpened] = useState(false);\n//   const id = useSelector((state) => state.user.me && state.user.me.id);\n//   const liked = post.Likers.find((v) => v.id === id);\n//   console.log(liked);\n//   const onLike = useCallback(() => {\n//     dispatch({\n//       type: LIKE_POST_REQUEST,\n//       data: post.id,\n//     });\n//   }, []);\n//   const onUnLike = useCallback(() => {\n//     dispatch({\n//       type: UNLIKE_POST_REQUEST,\n//       data: post.id,\n//     });\n//   }, []);\n//   const onToggleComment = useCallback(() => {\n//     setCommentFormOpened((prev) => !prev);\n//   });\n//   const onRemovePost = useCallback(() => {\n//     dispatch({\n//       type: REMOVE_POST_REQUEST,\n//       data: post.id,\n//     });\n//   }, []);\n//   return (\n//     <div style={{ marginBottom: 20 }}>\n//       <Card\n//         cover={post.Images[0] && <PostImages images={post.Images} />}\n//         actions={[\n//           <RetweetOutlined key=\"retweet\" />,\n//           liked ? (\n//             <HeartTwoTone\n//               key=\"heart\"\n//               twoToneColor=\"#eb2f96\"\n//               onClick={onUnLike}\n//             />\n//           ) : (\n//             <HeartOutlined key=\"heart\" onClick={onLike} />\n//           ),\n//           <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\n//           <Popover\n//             key=\"ellipsis\"\n//             content={\n//               <Button.Group>\n//                 {id && post.User.id === id ? (\n//                   <>\n//                     <Button>수정</Button>\n//                     <Button\n//                       type=\"danger\"\n//                       loading={removePostLoading}\n//                       onClick={onRemovePost}\n//                     >\n//                       삭제\n//                     </Button>\n//                   </>\n//                 ) : (\n//                   <Button>신고</Button>\n//                 )}\n//               </Button.Group>\n//             }\n//           >\n//             <EllipsisOutlined />\n//           </Popover>,\n//         ]}\n//         extra={id && <FollowButton post={post} />}\n//       >\n//         <Card.Meta\n//           avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n//           title={post.User.nickname}\n//           description={<PostCardContent postData={post.content} />}\n//         />\n//       </Card>\n//       {commentFormOpened && (\n//         <div>\n//           <CommentForm post={post} />\n//           <List\n//             header={`${post.Comments.length}개의 댓글`}\n//             itemLayout=\"horizontal\"\n//             dataSource={post.Comments}\n//             renderItem={(item) => (\n//               <li>\n//                 <Comment\n//                   author={item.User.nickname}\n//                   avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\n//                   content={item.content}\n//                 />\n//               </li>\n//             )}\n//           />\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n// PostCard.propTypes = {\n//   post: PropTypes.shape({\n//     id: PropTypes.number,\n//     User: PropTypes.object,\n//     content: PropTypes.string,\n//     createdAt: PropTypes.string,\n//     Comments: PropTypes.arrayOf(PropTypes.object),\n//     Images: PropTypes.arrayOf(PropTypes.object),\n//     Likers: PropTypes.arrayOf(PropTypes.object),\n//   }).isRequired,\n// };\n// export default PostCard;\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { Card, Button, Avatar, List, Comment, Popover } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport { RetweetOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, EllipsisOutlined } from \"@ant-design/icons\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nimport CommentForm from \"../CommentForm\";\nimport PostCardContent from \"./PostCardContent\";\nimport PostImages from \"./PostImages\";\nimport FollowButton from \"../FollowButton\";\nimport { REMOVE_POST_REQUEST, RETWEET_REQUEST } from \"../../../reducers/post\";\nvar CardWrapper = styled.div.withConfig({\n  displayName: \"PostCard__CardWrapper\",\n  componentId: \"dwnnci-0\"\n})([\"margin-bottom:20px;\"]);\n_c = CardWrapper;\n\nvar PostCard = function PostCard(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      removePostLoading = _useSelector.removePostLoading,\n      retweetError = _useSelector.retweetError;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(false),\n      liked = _useState2[0],\n      setLiked = _useState2[1];\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector2.me;\n\n  var id = me && me.id; // useEffect(() => {\n  //   if (retweetError) {\n  //     alert(retweetError);\n  //   }\n  // }, [retweetError]);\n\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onToggleLike = useCallback(function () {\n    setLiked(function (prev) {\n      return !prev;\n    });\n  }, [id]);\n  var onRemovePost = useCallback(function () {\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  var onRetweet = useCallback(function () {\n    if (!id) {\n      return alert(\"로그인이 필요합니다.\");\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(CardWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      cover: post.Images[0] && /*#__PURE__*/_jsxDEV(PostImages, {\n        images: post.Images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 34\n      }, _this),\n      actions: [/*#__PURE__*/_jsxDEV(RetweetOutlined, {\n        onClick: onRetweet\n      }, \"retweet\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, _this), liked ? /*#__PURE__*/_jsxDEV(HeartTwoTone, {\n        twoToneColor: \"#eb2f96\",\n        onClick: onToggleLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }, _this) : /*#__PURE__*/_jsxDEV(HeartOutlined, {\n        onClick: onToggleLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(MessageOutlined, {\n        onClick: onToggleComment\n      }, \"message\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(Popover, {\n        content: /*#__PURE__*/_jsxDEV(Button.Group, {\n          children: id && post.UserId === id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              children: \"\\uC218\\uC815\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 21\n            }, _this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"danger\",\n              loading: removePostLoading,\n              onClick: onRemovePost,\n              children: \"\\uC0AD\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 21\n            }, _this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n            children: \"\\uC2E0\\uACE0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 19\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 15\n        }, _this),\n        children: /*#__PURE__*/_jsxDEV(EllipsisOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, _this)\n      }, \"ellipsis\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }, _this)],\n      extra: /*#__PURE__*/_jsxDEV(FollowButton, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 16\n      }, _this),\n      children: post.RetweetId && post.Retweet ? /*#__PURE__*/_jsxDEV(Card, {\n        cover: post.Retweet.Images[0] && /*#__PURE__*/_jsxDEV(PostImages, {\n          images: post.Retweet.Images\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 50\n        }, _this),\n        children: /*#__PURE__*/_jsxDEV(Card.Meta, {\n          avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n            children: post.Retweet.User.nickname[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 19\n          }, _this),\n          title: post.Retweet.User.nickname,\n          description: /*#__PURE__*/_jsxDEV(PostCardContent, {\n            postData: post.Retweet.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 24\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, _this) : /*#__PURE__*/_jsxDEV(Card.Meta, {\n        avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n          children: post.User.nickname[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 19\n        }, _this),\n        title: post.User.nickname,\n        description: /*#__PURE__*/_jsxDEV(PostCardContent, {\n          postData: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 24\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, _this), commentFormOpened && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CommentForm, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(List, {\n        header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n        itemLayout: \"horizontal\",\n        dataSource: post.Comments || [],\n        renderItem: function renderItem(item) {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Comment, {\n              author: item.User.nickname,\n              avatar: /*#__PURE__*/_jsxDEV(Link, {\n                href: {\n                  pathname: \"/user\",\n                  query: {\n                    id: item.User.id\n                  }\n                },\n                as: \"/user/\".concat(item.User.id),\n                children: /*#__PURE__*/_jsxDEV(\"a\", {\n                  children: /*#__PURE__*/_jsxDEV(Avatar, {\n                    children: item.User.nickname[0]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 280,\n                    columnNumber: 25\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 279,\n                  columnNumber: 23\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 21\n              }, _this),\n              content: item.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 17\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 15\n          }, _this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true)]\n  }, post.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(PostCard, \"d7wJTMFT5CIh10qkDZC2eZLkAFU=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c2 = PostCard;\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    UserId: PropTypes.number,\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.any),\n    Images: PropTypes.arrayOf(PropTypes.any),\n    RetweetId: PropTypes.number,\n    Retweet: PropTypes.objectOf(PropTypes.any)\n  }).isRequired\n};\nexport default PostCard;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CardWrapper\");\n$RefreshReg$(_c2, \"PostCard\");","map":{"version":3,"sources":["/Users/youngjoo/Downloads/projects/react-nodebird/front/pages/components/PostForm/PostCard.jsx"],"names":["React","useState","useCallback","useEffect","Card","Button","Avatar","List","Comment","Popover","PropTypes","RetweetOutlined","HeartTwoTone","HeartOutlined","MessageOutlined","EllipsisOutlined","useSelector","useDispatch","styled","Link","CommentForm","PostCardContent","PostImages","FollowButton","REMOVE_POST_REQUEST","RETWEET_REQUEST","CardWrapper","div","PostCard","post","dispatch","state","removePostLoading","retweetError","commentFormOpened","setCommentFormOpened","liked","setLiked","user","me","id","onToggleComment","prev","onToggleLike","onRemovePost","type","data","onRetweet","alert","Images","UserId","RetweetId","Retweet","User","nickname","content","Comments","length","item","pathname","query","propTypes","shape","number","object","string","createdAt","arrayOf","any","objectOf","isRequired"],"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","sourcesContent":["// import React, { useState, useCallback } from \"react\";\n// import { useSelector, useDispatch } from \"react-redux\";\n// import PropTypes from \"prop-types\";\n// import { Card, Popover, Button, Avatar, List, Comment } from \"antd\";\n// import {\n//   RetweetOutlined,\n//   HeartOutlined,\n//   HeartTwoTone,\n//   MessageOutlined,\n//   EllipsisOutlined,\n// } from \"@ant-design/icons\";\n// import PostImages from \"./PostImages\";\n// import CommentForm from \"../CommentForm\";\n// import PostCardContent from \"./PostCardContent\";\n// import {\n//   REMOVE_POST_REQUEST,\n//   LIKE_POST_REQUEST,\n//   UNLIKE_POST_REQUEST,\n// } from \"../../../reducers/post\";\n// import FollowButton from \"../FollowButton\";\n\n// const PostCard = ({ post }) => {\n//   const dispatch = useDispatch();\n//   const { removePostLoading } = useSelector((state) => state.post);\n//   const [commentFormOpened, setCommentFormOpened] = useState(false);\n//   const id = useSelector((state) => state.user.me && state.user.me.id);\n//   const liked = post.Likers.find((v) => v.id === id);\n//   console.log(liked);\n//   const onLike = useCallback(() => {\n//     dispatch({\n//       type: LIKE_POST_REQUEST,\n//       data: post.id,\n//     });\n//   }, []);\n//   const onUnLike = useCallback(() => {\n//     dispatch({\n//       type: UNLIKE_POST_REQUEST,\n//       data: post.id,\n//     });\n//   }, []);\n//   const onToggleComment = useCallback(() => {\n//     setCommentFormOpened((prev) => !prev);\n//   });\n//   const onRemovePost = useCallback(() => {\n//     dispatch({\n//       type: REMOVE_POST_REQUEST,\n//       data: post.id,\n//     });\n//   }, []);\n\n//   return (\n//     <div style={{ marginBottom: 20 }}>\n//       <Card\n//         cover={post.Images[0] && <PostImages images={post.Images} />}\n//         actions={[\n//           <RetweetOutlined key=\"retweet\" />,\n//           liked ? (\n//             <HeartTwoTone\n//               key=\"heart\"\n//               twoToneColor=\"#eb2f96\"\n//               onClick={onUnLike}\n//             />\n//           ) : (\n//             <HeartOutlined key=\"heart\" onClick={onLike} />\n//           ),\n//           <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\n//           <Popover\n//             key=\"ellipsis\"\n//             content={\n//               <Button.Group>\n//                 {id && post.User.id === id ? (\n//                   <>\n//                     <Button>수정</Button>\n//                     <Button\n//                       type=\"danger\"\n//                       loading={removePostLoading}\n//                       onClick={onRemovePost}\n//                     >\n//                       삭제\n//                     </Button>\n//                   </>\n//                 ) : (\n//                   <Button>신고</Button>\n//                 )}\n//               </Button.Group>\n//             }\n//           >\n//             <EllipsisOutlined />\n//           </Popover>,\n//         ]}\n//         extra={id && <FollowButton post={post} />}\n//       >\n//         <Card.Meta\n//           avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n//           title={post.User.nickname}\n//           description={<PostCardContent postData={post.content} />}\n//         />\n//       </Card>\n//       {commentFormOpened && (\n//         <div>\n//           <CommentForm post={post} />\n//           <List\n//             header={`${post.Comments.length}개의 댓글`}\n//             itemLayout=\"horizontal\"\n//             dataSource={post.Comments}\n//             renderItem={(item) => (\n//               <li>\n//                 <Comment\n//                   author={item.User.nickname}\n//                   avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\n//                   content={item.content}\n//                 />\n//               </li>\n//             )}\n//           />\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// PostCard.propTypes = {\n//   post: PropTypes.shape({\n//     id: PropTypes.number,\n//     User: PropTypes.object,\n//     content: PropTypes.string,\n//     createdAt: PropTypes.string,\n//     Comments: PropTypes.arrayOf(PropTypes.object),\n//     Images: PropTypes.arrayOf(PropTypes.object),\n//     Likers: PropTypes.arrayOf(PropTypes.object),\n//   }).isRequired,\n// };\n\n// export default PostCard;\n\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { Card, Button, Avatar, List, Comment, Popover } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport {\n  RetweetOutlined,\n  HeartTwoTone,\n  HeartOutlined,\n  MessageOutlined,\n  EllipsisOutlined,\n} from \"@ant-design/icons\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\n\nimport CommentForm from \"../CommentForm\";\nimport PostCardContent from \"./PostCardContent\";\nimport PostImages from \"./PostImages\";\nimport FollowButton from \"../FollowButton\";\nimport { REMOVE_POST_REQUEST, RETWEET_REQUEST } from \"../../../reducers/post\";\n\nconst CardWrapper = styled.div`\n  margin-bottom: 20px;\n`;\n\nconst PostCard = ({ post }) => {\n  const dispatch = useDispatch();\n  const { removePostLoading, retweetError } = useSelector(\n    (state) => state.post\n  );\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\n  const [liked, setLiked] = useState(false);\n  const { me } = useSelector((state) => state.user);\n  const id = me && me.id;\n\n  // useEffect(() => {\n  //   if (retweetError) {\n  //     alert(retweetError);\n  //   }\n  // }, [retweetError]);\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened((prev) => !prev);\n  }, []);\n\n  const onToggleLike = useCallback(() => {\n    setLiked((prev) => !prev);\n  }, [id]);\n\n  const onRemovePost = useCallback(() => {\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id,\n    });\n  }, []);\n\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return alert(\"로그인이 필요합니다.\");\n    }\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id,\n    });\n  }, [id]);\n\n  return (\n    <CardWrapper key={post.id}>\n      <Card\n        cover={post.Images[0] && <PostImages images={post.Images} />}\n        actions={[\n          <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\n          liked ? (\n            <HeartTwoTone\n              twoToneColor=\"#eb2f96\"\n              key=\"heart\"\n              onClick={onToggleLike}\n            />\n          ) : (\n            <HeartOutlined key=\"heart\" onClick={onToggleLike} />\n          ),\n          <MessageOutlined key=\"message\" onClick={onToggleComment} />,\n          <Popover\n            key=\"ellipsis\"\n            content={\n              <Button.Group>\n                {id && post.UserId === id ? (\n                  <>\n                    <Button>수정</Button>\n                    <Button\n                      type=\"danger\"\n                      loading={removePostLoading}\n                      onClick={onRemovePost}\n                    >\n                      삭제\n                    </Button>\n                  </>\n                ) : (\n                  <Button>신고</Button>\n                )}\n              </Button.Group>\n            }\n          >\n            <EllipsisOutlined />\n          </Popover>,\n        ]}\n        extra={<FollowButton post={post} />}\n      >\n        {post.RetweetId && post.Retweet \n        ? (\n          <Card cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}>\n            <Card.Meta\n          avatar={<Avatar>{post.Retweet.User.nickname[0]}</Avatar>}\n          title={post.Retweet.User.nickname}\n          description={<PostCardContent postData={post.Retweet.content} />}\n        />\n        </Card>\n        )\n\n        : (\n          <Card.Meta\n          avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n          title={post.User.nickname}\n          description={<PostCardContent postData={post.content} />}\n        />\n        )}\n       \n      </Card>\n      {commentFormOpened && (\n        <>\n          <CommentForm post={post} />\n          <List\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\n            itemLayout=\"horizontal\"\n            dataSource={post.Comments || []}\n            renderItem={(item) => (\n              <li>\n                <Comment\n                  author={item.User.nickname}\n                  avatar={\n                    <Link\n                      href={{ pathname: \"/user\", query: { id: item.User.id } }}\n                      as={`/user/${item.User.id}`}\n                    >\n                      <a>\n                        <Avatar>{item.User.nickname[0]}</Avatar>\n                      </a>\n                    </Link>\n                  }\n                  content={item.content}\n                />\n              </li>\n            )}\n          />\n        </>\n      )}\n    </CardWrapper>\n  );\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    UserId: PropTypes.number,\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.any),\n    Images: PropTypes.arrayOf(PropTypes.any),\n    RetweetId: PropTypes.number,\n    Retweet: PropTypes.objectOf(PropTypes.any)\n  }).isRequired,\n};\n\nexport default PostCard;\n"]},"metadata":{},"sourceType":"module"}