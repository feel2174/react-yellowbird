{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(retweet),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnLikePost),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked18 = /*#__PURE__*/_regeneratorRuntime.mark(watchRetweet),\n    _marked19 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, put, delay, takeLatest, throttle, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", data);\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data));\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(removePostAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 8;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 8:\n          _context2.next = 14;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 10]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(\"posts?/lastId=\".concat(lastId || 0));\n}\n\nfunction loadPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(loadPostsAPI, action.data);\n\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context4.next = 12;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 12;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(\"post?/\".concat(data));\n}\n\nfunction loadPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadPostAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: LOAD_POST_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(\"/post/\".concat(data, \"/like\"));\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context6.sent;\n          _context6.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context6.next = 12;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          _context6.next = 12;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context6.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 8]]);\n}\n\nfunction unlikePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data, \"/like\"));\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 12;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 12;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context7.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post(\"/post/images\", data);\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context8.sent;\n          _context8.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context8.next = 12;\n          break;\n\n        case 8:\n          _context8.prev = 8;\n          _context8.t0 = _context8[\"catch\"](0);\n          _context8.next = 12;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context8.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[0, 8]]);\n}\n\nfunction retweetAPI(data) {\n  return axios.post(\"/post/\".concat(data, \"/retweet\"), data);\n}\n\nfunction retweet(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function retweet$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(retweetAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context9.next = 12;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          _context9.next = 12;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context9.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return takeLatest(LOAD_POST_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}\n\nfunction watchUnLikePost() {\n  return _regeneratorRuntime.wrap(function watchUnLikePost$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.next = 2;\n          return all([fork(watchAddPost), fork(watchRemovePost), fork(watchLoadPost), fork(watchLoadPosts), fork(watchLikePost), fork(watchUnLikePost), fork(watchAddComment), fork(watchUploadImages), fork(watchRetweet)]);\n\n        case 2:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19);\n}","map":{"version":3,"sources":["/Users/youngjoo/Downloads/projects/react-nodebird/front/sagas/post.js"],"names":["addPost","removePost","addComment","loadPosts","loadPost","likePost","unlikePost","uploadImages","retweet","watchAddPost","watchRemovePost","watchAddComment","watchLoadPost","watchLoadPosts","watchLikePost","watchUnLikePost","watchUploadImages","watchRetweet","postSaga","all","fork","put","delay","takeLatest","throttle","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","action","result","type","id","error","response","removePostAPI","addCommentAPI","postId","console","loadPostsAPI","lastId","get","loadPostAPI","likePostAPI","patch","unlikePostAPI","uploadImagesAPI","retweetAPI"],"mappings":"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","sourcesContent":["import {\n  all,\n  fork,\n  put,\n  delay,\n  takeLatest,\n  throttle,\n  call,\n} from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  LOAD_POST_REQUEST,\n  LOAD_POST_SUCCESS,\n  LOAD_POST_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  LOAD_POSTS_FAILURE,\n  LIKE_POST_REQUEST,\n  UNLIKE_POST_REQUEST,\n  LIKE_POST_SUCCESS,\n  LIKE_POST_FAILURE,\n  UNLIKE_POST_SUCCESS,\n  UNLIKE_POST_FAILURE,\n  UPLOAD_IMAGES_REQUEST,\n  UPLOAD_IMAGES_SUCCESS,\n  UPLOAD_IMAGES_FAILURE,\n  RETWEET_REQUEST,\n  RETWEET_SUCCESS,\n  RETWEET_FAILURE,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`posts?/lastId=${lastId || 0}`);\n}\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(`post?/${data}`);\n}\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post(`/post/images`, data);\n}\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`, data);\n}\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnLikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchRemovePost),\n    fork(watchLoadPost),\n    fork(watchLoadPosts),\n    fork(watchLikePost),\n    fork(watchUnLikePost),\n    fork(watchAddComment),\n    fork(watchUploadImages),\n    fork(watchRetweet),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}